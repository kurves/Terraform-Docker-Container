
resource "aws_instance" "kurves-instance" {
  ami           = "ami-0c55b159cbfafe1t0"
  instance_type = "t2.micro"
  
   tags = {
    Name = "terraform-kurves"
    
     vpc_security_group_ids = [aws_security_group.instance.id]
    
    user_data = <<-EOF
              #!/bin/bash
              echo "Hello, World- terrfaorm" > index.html
              nohup busybox httpd -f -p 8000 &
              EOF
              
    lifecycle {
    create_before_destroy = true
  }
              
}

resource "aws_security_group" "kurves-instance" {
  name = "terraform-kurves-instance"
  ingress {
    from_port   = 8000
    to_port     = 8000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

output "public_ip" {
  value       = aws_instance.kurves-instance.public_ip
  description = "The public IP of the kurves web server"
}

resource "aws_autoscaling_group" "kurves-asg" {
  launch_configuration = aws_launch_configuration.kurves.id
    availability_zones   = data.aws_availability_zones.all.names
  min_size = 2
  max_size = 10
  tag {
    key                 = "Name"
    value               = "terraform-asg-kurves"
    propagate_at_launch = true
  }
}
resource "aws_elb" "kurves-lb" {
  name               = "terraform-asg-kurves"
  availability_zones = data.aws_availability_zones.all.names
  security_groups    = [aws_security_group.elb.id]
  
   # This adds a listener for incoming HTTP requests.
  listener {
    lb_port           = 8080
    lb_protocol       = "http"
    instance_port     = var.server_port
    instance_protocol = "http"
}

resource "aws_security_group" "elb" {
  name = "terraform-example-elb"
  # Allow all outbound
  egress {
    from_port   = 80
    to_port     = 80
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  # Inbound HTTP from anywhere
  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
